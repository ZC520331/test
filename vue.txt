git commit '之后修改文件内容'
git commit - m '第二次修改'
测试撤销修改已经add到了暂存区
测试 dev分支添加内容
MVC:
	用户对view的操作交给controller处理,controler中响应用户的事件,
	调用model的接口对数据进行操作,model发生变化通知相关视图进行更新 
MVVM
	Model:数据层  View:视图层
    ViewModel:监听模型数据的改变和控制视图行为、处理用户交互，简单理解就是一个同步View 和 Model的对象，连接Model和View
    View 和 Model 之间并没有直接的联系，而是通过ViewModel进行交互，
    Model 和 ViewModel 之间的交互是双向的， 因此View 数据的变化会同步到Model中，而Model 数据的变化也会立即反应到View 上
    ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而View 和 Model 之间的同步工作完全是自动的，
    无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作DOM, 不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理
生命周期:breforeCreate->created->beforeMount->mounted->beforeUpdate->updated->beforeDestory->destoryed
keep-alive:activated反复调用 deactivated只会调用一次
keep-alive include exclude="字符串或表达式"  强制刷新组件this.$forceUpdate()
keep-alive:原理？
渲染过程:
 数据处理(initState)--->模板编译(complieToFunctions)生成渲染函数(render)
 -->render函数生成虚拟DOM--->虚拟DOM映射为真实的DOM(patch)挂载到页面
vue组件传值：1.prpos $emit 2.事件总线 3.vuex 4.$parent $children 5.provide inject 6. $atts $listeners(跨多级传值时使用)
自定义指令directives：生命周期：bind() inserted() update() componentUpdated() unbind() 
v-model原理：v-bind指令和@change事件的结合体
多语言：1.准备好翻译的文件exportd deafult导出 2.index文件创建vue-i18n实例 导出实例 3.main.js vue.use(i18n) 4.$t()使用
vue全局方法，挂载到vue的原型上， 或者全局混入mixin(不推荐使用,影响每一个创建的vue实例）
访问跟实例：this.$root
自定义事件无效:组件外部加修饰符.native 组件内部声明this.$emit('')
vue使用v-for遍历对象时，是按什么顺序遍历的
 1.会先判断是否有iterator接口，如果有循环执行next()方法
 2、没有iterator的情况下，会调用Object.keys()方法，在不同浏览器中，JS引擎不能保证输出顺序一致
 3、保证对象的输出顺序可以把对象放在数组中，作为数组的元素
父子组件实现双向数据绑定
 1.利用对象的引用关系来实现
 2.父子组件之间的数据传递
 3.使用.sync 修饰符
nextCkick？原理？作用作用:处理数据变化后,dom还没及时更新,nextclick就可以获取到数据更新后的dom变化
vue监听到数组变化的方法：
 push pop shift unshift splice sort reverse
 解决不能监听数组的方法，this.$set()
 对象：无法监听对象的增加修改删除
props类型验证: String, Number, Boolean,  Array,  Object, Function, Promise
key的作用:更新已渲染的元素列表时,默认用就地复用策略;列表数据修改的时候,他会根据key值去判断某个值是否修改,如果修改,则重新渲染这一项,否则	复用之前的元素
虚拟DOM 如何实现一个虚拟DOM
	1.用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中
	2.当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异(对比差异用diff算法)
	3.把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了
vue边界情况有哪些:	访问元素 组件 循环引用 模板定义的替代品 程序化的事件监听器 控制监听
首屏加载速度慢:
	①使用路由懒加载
	②开启Gzip压缩 
	③使用webpack的externals属性把不需要的库文件分离出去，减少打包后文件的大小 
	④使用vue的服务端渲染（SSR）