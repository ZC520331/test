减少文件搜索范围
	loader: 通过test include exclude 来配置 通过cacheDirectory选项开启缓存
	resolve.modules: webpack去那个目录寻找第三方模块,直接指定项目的根目录
	resolve.mainFields: 第三方模块使用那个入口文件,  mainFields: ['main']
	resolve.alias: 别名配置
	resolve.extensions:在导入语句没带文件后缀时，Webpack 会自动带上后缀后去尝试询问文件是否存在 extensions: ['.js', '.json']
	module.noParse: 忽略没有模块化的文件,  noParse: [/jquery\.min\.js$/]
DLLPlugin: 单独打包第三方库文件
	DllPlugin 插件：用于打包出一个个单独的动态链接库文件。
	DllReferencePlugin 插件：用于在主要配置文件中去引入 DllPlugin 插件打包好的动态链接库文件
HappyPack: 多进程打包,可以使用cacheDir开启缓存
	{   test: /\.js$/,
        use: ['happypack/loader?id=babel'],  // 把对 .js 文件的处理转交给 id 为 babel 的 HappyPack 实例
        // 排除 node_modules 目录下的文件，node_modules 目录下的文件都是采用的 ES5 语法，没必要再通过 Babel 去转换
        exclude: path.resolve(__dirname, 'node_modules'),},
    new HappyPack({
      id: 'babel',   // 用唯一的标识符 id 来代表当前的 HappyPack 是用来处理一类特定的文件
      loaders: ['babel-loader?cacheDirectory'],      // 如何处理 .js 文件，用法和 Loader 配置中一样 }),
ParallelUglifyPlugin:多进程压缩代码,webpack默认使用的是UglifyJS
	new ParallelUglifyPlugin({
      // 传递给 UglifyJS 的参数
      uglifyJS: {
        output: {
          beautify: false,          // 最紧凑的输出
          comments: false,           // 删除所有的注释},
        compress: {
          warnings: false,           // 在UglifyJs删除没有用到的代码时不输出警告
          drop_console: true,            // 删除所有的 `console` 语句，可以兼容ie浏览器
          collapse_vars: true,            // 内嵌定义了但是只用到一次的变量
          reduce_vars: true,          // 提取出出现多次但是没有定义成变量去引用的静态值
        }},}),
开启 Scope Hoisting: 可以使压缩的代码更小
	new ModuleConcatenationPlugin()  webpack3新增的       
CommonsChunkPlugin: 提取公共代码
	new CommonsChunkPlugin({
	  chunks: ['a', 'b'], 	  // 从哪些 Chunk 中提取
	  name: 'common' 	  // 提取出的公共部分形成一个新的 Chunk，这个新 Chunk 的名称 })
自动刷新:
	文件监听: watchOptions: {ignored: /node_modules/,aggregateTimeout: 300,poll: 1000} 1000ms询问一次
	之后就是-自动刷新浏览器:webpack 模块负责监听文件，webpack-dev-server 模块则负责刷新浏览器
	自动刷新原理:往要开发的网页中注入代理客户端代码，通过代理客户端去刷新整个页面
模块热替换: webpack-dev-server --hot 或者 通过配置plugin
构建结果分析: 官方网站上传json文件,或者使用插件webpack-bundle-analyzer
库文件使用CDN:
vue项目按需加载:在.babelrc配置中或babel-loader的参数中进行设置	
	{"presets": [["es2015", { "modules": false }]],
  "plugins": [
    ["component",
      {"libraryName": "element-ui",
        "styleLibraryName": "theme-chalk"}]]}
删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动webpack时追加参数--optimize-minimize来实现